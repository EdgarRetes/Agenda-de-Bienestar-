Entrega 1:

*  El contexto que se incluye en el repositorio no es lo suficientemente detallado. Te recomiendo trabajar en la definición del problema (extenderlo), para facilitar la identificación de clases.
- El README ahora contiene suficiente contexto para entender el porqué del programa así como el funcionamiento de este. Las clases pueden y relaciones entre ellas pueden distinguirse con el contexto y la ayuda del diagrama.

Entrega 2: 

* Hay que revisar la notación utilizada para la relación de herencia.
- Se corrigió la notación de la herencia para que los cuatro tipos de eventos (social, personal, vocacional y físico) sean herencia de la clase evento, para que así tengan los mismos atributos y métodos, además que cada uno contiene sus atributos y métodos que sean de valor e independientes. Al revisarlo en clase confirmé que esté definido de forma correcta y corresponda al código.
* Las relaciones de composición/agregación no tienen definido atributo del tipo de la clase componente
- Ahora las clases en el diagrama tienen definido en sus atributos los vectores con el tipo de clase de sus componentes o asociaciones. Al revisarlo en clase confirmé que esté definido de forma correcta y corresponda al código.

Entrega 3: 

* Las clases tienen la implementación de los métodos en la sección correspondiente a la definición. Hay que separar.
- Cada clase ahora tiene separada la definicón de los procesos. Para eso definí cada método en la sección pública de la clase, mientars que le asigne un proceso tipo Class::method(){} fuera de la clase a cada uno de los métodos.

* Algunos métodos tienen cout que puede reemplazarse por el return de un string.
- Cambié cada una de las funciones que tenían cout en las clases para regresar valores string en el main y poder desplegarlos en la panatalla, excepto por las funcioens complejas como display_Calendar y display_Day ya que están muy relacionadas con la modifcación de objetos y tienen un espacio asignado en la terminal por lo que se complica concatenar cada uno de esos elemntos para después regresarlo al main, como se explico en la sesión.

* Hay que ajustar el diagrama de clases para que las relaciones de agregación vayan directo a los tipos de evento. ¿Por qué agregas los eventos a dos vectores?
- Como se explicó durante la sesión, los diferentes tipos de eventos se añaden a su vector específico de la clase además de a un vector globar para todos los eventos debido a la facilidad para acceder a lso atributos que se consiguen de manera individual y colectiva. El diagrama de clases se actualizó para que corresponda con el código añadiendo una relación de composición en la clase Day de la clase superior (evento) y de cada una de sus herencias.
